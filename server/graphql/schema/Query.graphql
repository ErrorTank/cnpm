


type registerOuputType {
    message: String
    redirect: String
}

type IndexDealProduct{
    product: Product
    timeLeft: String
}

type loginOutputType {
    user: User!
    token: String!
    redirect: String
}

type recentVisitedOuput{
    createdAt: String!
    product: Product!
}

type CartItem{
    product: ID
    quantity: Int
    option: ID
}

type City{
    name: String
    name_with_type: String
    type: String
    code: String
}
type Ward{
    name: String
    name_with_type: String
    type: String
    code: String
    parent_code: String
}
type District{
    name: String
    name_with_type: String
    type: String
    code: String
    parent_code: String
}

type Address{
    city: City
    ward: Ward
    district: District
    description: String
}

type User implements Node{
    _id: ID!
    fullname: String!
    email: String!
    phone: String
    password: String
    gender: Boolean
    dob: String
    subscribe: Boolean
    updatedAt: String!
    createdAt: String!
    role: Int!
    isVerify: Boolean!
    picture: String
    social: Social
    address: Address
    provider: Provider
    recentVisit: [recentVisitedOuput]!
    favorites: [ID]!
    carts: [CartItem]!

}

type BasicProduct{
    info: Product
    meanStar: Float
    commentCount: Int
    timeLeft: String
}

type CartOutput{
    product: Product
    quantity: Int

}

type CategoryPlainInfo{
    _id: ID
    name: String
    parent: ID
}

type FilterChild{
    _id: ID
    name: String
    count: Int
}

type ProductFiltersCategory{
    _id:ID
    name: String
    childs: [FilterChild]
}

type ProductFilters{
    categories: ProductFiltersCategory
    providers: [FilterChild]
    brands: [FilterChild]

}

type ProductsListInfo{
    products: [BasicProduct]
    total: Int
    execTime: String
    productFilters: ProductFilters
}

type PlainProviderInfo{
    _id: ID
    name: String
    address: String
    phone: String
    email: String
}

type Query {
    getAuthenUser: User
    checkConfirm(token: String!): loginOutputType
    getSocialUserInfo(socialID: String!): loginOutputType
    regularLogin(payload: RegularLoginInput!): loginOutputType
    checkEmailExisted(email: String!): CheckEmailUnion
    getIndexDealProducts(skip: Int, take: Int): [IndexDealProduct]
    getProduct(productID: String!): Product
    getBasicProduct(productID: String!): BasicProduct
    getUser(userID: ID!): User
    getUserRecentVisited(userID: ID!): User
    getProductComments(productID: ID!, skip: Int!, take: Int!, sortByStar: SortEnum): Product
    getCartItemByIdList(list: [CartInput]): [CartOutput]
    getCacheCategoriesInfo: [CategoryPlainInfo]
    getCategoriesParents(categoryID: String): Category
    findByKeyword(keyword: String): [Product]
    getCacheBrandsInfo: [Brand]
    searchProducts(keyword: String): ProductsListInfo
    getCacheProvidersInfo: [PlainProviderInfo]
    getProducts(mainFilter: MainFilterInput , productFilter: ProductFilterInput, categoryID: ID, skip: Int, take: Int, rating: Int, brand: ID, provider: ID, priceRange: String): ProductsListInfo
    getFavItemsByIdList(list: [ID]): [BasicProduct]
}

