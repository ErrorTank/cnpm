


type registerOuputType {
    message: String
}

type IndexDealProduct{
    product: Product
    timeLeft: String
}

type loginOutputType {
    user: User!
    token: String!
}

type User implements Node{
    _id: ID!
    fullname: String!
    email: String!
    phone: String
    password: String
    gender: Boolean
    dob: String
    subscribe: Boolean
    updatedAt: String!
    createdAt: String!
    role: Int!
    isVerify: Boolean!
    picture: String
    social: Social
    provider: Provider
    recentVisit: [Product]!

}




type Query {
    getAuthenUser: User
    checkConfirm(token: String!): loginOutputType
    getSocialUserInfo(socialID: String!): loginOutputType
    regularLogin(payload: RegularLoginInput!): loginOutputType
    checkEmailExisted(email: String!): Boolean
    getIndexDealProducts(skip: Int, take: Int): [IndexDealProduct]
}

