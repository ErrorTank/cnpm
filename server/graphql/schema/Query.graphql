


type registerOuputType {
    message: String
}

type IndexDealProduct{
    product: Product
    timeLeft: String
}

type loginOutputType {
    user: User!
    token: String!
}

type recentVisitedOuput{
    createdAt: String!
    product: Product!
}

type CartItem{
    product: ID
    quantity: Int
    option: ID
}

type User implements Node{
    _id: ID!
    fullname: String!
    email: String!
    phone: String
    password: String
    gender: Boolean
    dob: String
    subscribe: Boolean
    updatedAt: String!
    createdAt: String!
    role: Int!
    isVerify: Boolean!
    picture: String
    social: Social
    provider: Provider
    recentVisit: [recentVisitedOuput]!
    favorites: [ID]!
    carts: [CartItem]!

}

type BasicProduct{
    info: Product
    meanStar: Float
    commentCount: Int
    timeLeft: String
}



type Query {
    getAuthenUser: User
    checkConfirm(token: String!): loginOutputType
    getSocialUserInfo(socialID: String!): loginOutputType
    regularLogin(payload: RegularLoginInput!): loginOutputType
    checkEmailExisted(email: String!): CheckEmailUnion
    getIndexDealProducts(skip: Int, take: Int): [IndexDealProduct]
    getProduct(productID: String!): Product
    getBasicProduct(productID: String!): BasicProduct
    getUser(userID: ID!): User
    getUserRecentVisited(userID: ID!): User
    getProductComments(productID: ID!, skip: Int!, take: Int!, sortByStar: SortEnum): Product
}

